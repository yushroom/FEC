struct SVertInVBO
{
    float3 pos;
    float2 uv;
    float3 norm;
    float4 tang;
};

struct SVertInSkin
{
	uint4 index;
	float4 weight;
};

uint							g_VertCount		: register(b0);
StructuredBuffer<SVertInVBO>	g_SourceVBO		: register(t0);
StructuredBuffer<SVertInSkin>	g_SourceSkin	: register(t1);
StructuredBuffer<float4x4>		g_Bones			: register(t2);
RWStructuredBuffer<SVertInVBO>	g_MeshVertsOut	: register(u0);

#define NR_THREADS  64

[numthreads(NR_THREADS, 1, 1)]
void CS(uint3 threadID : SV_DispatchThreadID)
{
    const uint t = threadID.x;

    if (t >= g_VertCount)
    {
        return;
    }
    SVertInSkin skin = g_SourceSkin[t];
    float4x4 skinMatrix = skin.weight.x * g_Bones[skin.index.x];
    skinMatrix += skin.weight.y * g_Bones[skin.index.y];
    skinMatrix += skin.weight.z * g_Bones[skin.index.z];
    skinMatrix += skin.weight.w * g_Bones[skin.index.w];
    SVertInVBO vert = g_SourceVBO[t];
    float4 pos =  mul( float4(vert.pos, 1), skinMatrix );
    g_MeshVertsOut[t].pos = pos.xyz/pos.w;
    float4 normal =  mul( float4(vert.norm, 0), skinMatrix );
    g_MeshVertsOut[t].norm = normal.xyz;
}
